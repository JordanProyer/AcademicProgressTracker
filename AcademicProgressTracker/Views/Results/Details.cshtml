@model AcademicProgressTracker.ViewModels.ResultsDetailedViewModel
@{
    ViewBag.Title = @Model.Module.Name;
    ViewBag.Message = "Detailed analytics for: " + @Model.Module.Name;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>@ViewBag.Title</h1>
<p>@ViewBag.Message</p>
<br/>

<div>
    <h4>This chart shows the percentage mark achieved for each coursework for this module:</h4>
    <div id="gradesChartContainer" style="height: 370px; width: 100%;"></div>
    <br /><br /><br /><br />
</div>
<div>
    <h4>This chart shows your coursework grades with respect to time. The solid line shows each individual grade and the dotted line shows the weighted total:</h4>
    <div id="gradesOverTimeChartContainer" style="height: 370px; width: 100%;"></div>
    <br/><br/><br/><br/>
</div>
<div>
    <h4>This chart shows the the maximum possible grade you can achieve for this module based on the coursework you have already completed:</h4>
    <div id="maximumgradeChartContainer" style="height: 370px; width: 100%;"></div>
    <br/><br/><br/><br/>
</div>
<div>
    <h4>This chart shows what mark you need to average in remianing coursework to achieve each classification for this module (a required mark of 0 means you have already achieved that classification):</h4>
    <div id="marksToClassificationChartContainer" style="height: 370px; width: 100%;"></div>
    <br/><br/><br/><br/>
</div>
<div>
    <h4>This chart shows your predicted grade for this module using the K-nearest-neighbour algorithm. Using the courseworks you have already completed, your marks will be compared with other students who have completed this module. Using their final result, your predicted result can be predicted: </h4>
    <h4 style="font-weight: bolder" id ="knnPredictedGrade">Your predicted grade: </h4>
    <h5>How many nearest neightbours do you want to view? (max: 5)</h5>
    <input type="text" id="kValueDistance" value="3"/>
    <input type="submit" id="btnSubmitDistance" class="btn btn-info" value="Run" onclick="redrawKnnResultGraphDistance()"/><br/>
    <div id="knnChartContainerDistance" style="height: 370px; width: 100%;"></div>
    <br/><br/><br/><br/>
</div>
<div>
    <h4>This chart shows the 'distance' each of your nearest neighbours is away from you. The smaller the distance, the closer your coursework marks are to theirs and the more accurate your predicted grade is likely to be:</h4>
    <h5>How many nearest neightbours do you want to view? (max: 5)</h5>
    <input type="text" id="kValueBubble" value="3"/>
    <input type="submit" id="btnSubmitBubble" class="btn btn-info" value="Run" onclick="redrawKnnResultGraphBubble()"/><br/>
    <div id="knnChartContainerBubble" style="height: 370px; width: 100%;"></div>
    <br/><br/><br/><br/>
</div>
<div>
    <h4>This chart shows the distribution of results for this module across all grades entered</h4>
    <div id="probabilityDensityChartContainer" style="height: 370px; width: 100%;"></div>
    <br /><br /><br /><br />
</div>

<script>
        window.onload = function() {
            drawMarksGraph();
            drawGradesOverTimeGraph();
            drawMaximumResultGraph();
            drawMarksToClassificationGraph();
            drawKnnResultGraphDistance();
            drawKnnResultGraphBubble();
            drawProbabilityDensityGraph();
        }

        function drawMarksGraph() {
            var dataPoints = [];

            var chart = new CanvasJS.Chart("gradesChartContainer",
                {
                    animationEnabled: true,
                    theme: "light1",
                    title: {
                        text: "Coursework Grades"
                    },
                    axisX: {
                        title: "Coursework Name",
                        titleFontSize: 24,
                    },
                    axisY: {
                        title: "Mark achieved (%)",
                        titleFontSize: 24,
                        maximum: 100,
                        interlacedColor: "#D6DCFC"
                    },

                    toolTip: {
                        shared: true
                    },
                    data: [
                        {
                            type: "column",
                            name: "Current Mark (%)",
                            dataPoints: dataPoints
                        },
                    ]
                });

            function addData(data) {
                for (var i = 0; i < data.length; i++) {
                    dataPoints.push({
                        label: data[i].Name,
                        y: data[i].Mark
                    });
                }
                chart.render();

            }

            var moduleId = @Model.Module.Id;
            var url = '@Url.Action("GetCourseworkGrades", "Results")' + '?moduleId=' + moduleId;
            $.getJSON(url, addData);
    }


        function drawGradesOverTimeGraph() {
            var dataPoints = [];
            var dataPoints2 = [];

            var chart = new CanvasJS.Chart("gradesOverTimeChartContainer",
                {
                    animationEnabled: true,
                    theme: "light1",
                    title: {
                        text: "Coursework Grades Over Time"
                    },
                    axisX: {
                        title: "Date",
                        titleFontSize: 24,
                    },
                    axisY: {
                        title: "Mark achieved (%)",
                        titleFontSize: 24,
                        maximum: 100,
                        interlacedColor: "#D6DCFC"
                    },
                    axisY2: {
                        title: "Cumulative Weighted Mark (%)",
                        titleFontColor: "#C0504E",
                        lineColor: "#C0504E",
                        tickColor: "#C0504E",
                        maximum: 100,
                    },
                    toolTip: {
                        shared: true
                    },
                    legend: {
                        cursor:"pointer",
                        itemclick: toggleDataSeries
                    },
                    data: [
                        {
                            type: "line",
                            xValueType: "dateTime",
                            name: "Coursework Mark (%)",
                            showInLegend: true,
                            dataPoints: dataPoints
                        },
                        {
                            type: "line",
                            xValueType: "dateTime",
                            name: "Cumulative Weighted Mark (%)",
                            showInLegend: true,
                            axisYType: "secondary",
                            color: "#C0504E",
                            lineDashType: "dash",
                            dataPoints: dataPoints2
                        }
                    ]
                });

            function addData(data) {
                for (var i = 0; i < data.length; i++) {
                    dataPoints.push({
                        x: new Date(data[i].AddedDateTime),
                        y: data[i].Mark
                    });
                    dataPoints2.push({
                        x: new Date(data[i].AddedDateTime),
                        y: data[i].WeightedMark
                    });
                }
                chart.render();

            }

            function toggleDataSeries(e) {
                if (typeof(e.dataSeries.visible) === "undefined" || e.dataSeries.visible) {
                    e.dataSeries.visible = false;
                }
                else {
                    e.dataSeries.visible = true;
                }
                chart.render();
            }

            var moduleId = @Model.Module.Id;
            var url = '@Url.Action("GetCourseworkGradesOverTime", "Results")' + '?moduleId=' + moduleId;
            $.getJSON(url, addData);
        }


        function drawMaximumResultGraph() {
            var dataPoints = [];
            var dataPoints2 = [];

            var chart = new CanvasJS.Chart("maximumgradeChartContainer",
                {
                    animationEnabled: true,
                    theme: "light1",
                    title: {
                        text: "Maximum Possible Grade"
                    },
                    axisX: {
                        title: "Module",
                        titleFontSize: 24,
                    },
                    axisY: {
                        title: "Weighted Mark (%)",
                        titleFontColor: "#4F81BC",
                        lineColor: "#4F81BC",
                        labelFontColor: "#4F81BC",
                        tickColor: "#4F81BC",
                        interlacedColor: "#F8F1E4",
                        titleFontSize: 24,
                        maximum: 100
                    },
                    axisY2: {
                        title: "Maximum Possible Mark (%)",
                        titleFontColor: "#C0504E",
                        lineColor: "#C0504E",
                        tickColor: "#C0504E",
                        maximum: 100,
                    },
                    toolTip: {
                        shared: true
                    },
                    legend: {
                        cursor:"pointer",
                        itemclick: toggleDataSeries
                    },
                    data: [
                        {
                            type: "column",
                            name: "Current Weighted Mark (%)",
                            legendText: "Current Weighted Mark (%)",
                            showInLegend: true,
                            dataPoints: dataPoints
                        },
                            {
                                type: "column",
                                name: "Best Possible Weighted Mark (%)",
                                legendText: "Best Possible Weighted Mark (%)",
                                showInLegend: true,
                                axisYType: "secondary",
                                color: "#C0504E",
                                dataPoints: dataPoints2
                            }
                    ]
                });

            function addData(data) {
                for (var i = 0; i < data.length; i++) {
                    dataPoints.push({
                        label: "Grades",
                        y: data[i].CurrentWeightedMark
                    });
                    dataPoints2.push({
                        label: "Grades",
                        y: data[i].MaximumWeightedMark
                    });
                }
                chart.render();

            }

            function toggleDataSeries(e) {
                if (typeof(e.dataSeries.visible) === "undefined" || e.dataSeries.visible) {
                    e.dataSeries.visible = false;
                }
                else {
                    e.dataSeries.visible = true;
                }
                chart.render();
            }

            var moduleId = @Model.Module.Id;
            var url = '@Url.Action("GetMaximumWeightedGrade", "Results")' + '?moduleId=' + moduleId;
            $.getJSON(url, addData);
        }

        function drawMarksToClassificationGraph() {
            var dataPoints = [];

            var chart = new CanvasJS.Chart("marksToClassificationChartContainer",
                {
                    animationEnabled: true,
                    theme: "light1",
                    title: {
                        text: "Average Mark in Remaining Coursework for:"
                    },
                    axisX: {
                        title: "Distance",
                        titleFontSize: 24,
                    },
                    axisY: {
                        title: "Required Mark (%)",
                        titleFontSize: 24,
                        maximum: 100,
                        interlacedColor: "#D6DCFC"
                    },

                    toolTip: {
                        shared: true
                    },
                    data: [
                        {
                            type: "column",
                            name: "Mark (%)",
                            toolTipContent: "<b>{label}</b><br/>Required Mark (%): {y}<br/>",
                            dataPoints: dataPoints
                        },
                    ]
                });

            function addData(data) {
                for (var i = 0; i < data.length; i++) {
                    dataPoints.push({
                        label: data[i].Label,
                        y: data[i].MarkNeeded,
                    });
                }
                chart.render();

            }

            var moduleId = @Model.Module.Id;
            var url = '@Url.Action("GetMarksToClassification", "Results")' + '?moduleId=' + moduleId;
            $.getJSON(url, addData);
        }

        function drawKnnResultGraphDistance() {
            var dataPoints = [];
            var dataPoints2 = [];

            var chart = new CanvasJS.Chart("knnChartContainerDistance",
                {
                    animationEnabled: true,
                    theme: "light1",
                    title: {
                        text: "Nearest Neighbours (Mark)"
                    },
                    axisX: {
                        title: "Neighbour",
                        titleFontSize: 24,
                    },
                    axisY: {
                        title: "Mark (%)",
                        titleFontSize: 24,
                        maximum: 100,
                        interlacedColor: "#D6DCFC"
                    },
                    axisY2: {
                        titleFontColor: "#C0504E",
                        lineColor: "#C0504E",
                        tickColor: "#C0504E",
                        maximum: 100,
                    },

                    toolTip: {
                        shared: true
                    },
                    data: [
                        {
                            type: "bar",
                            name: "Predicted / Attained Module Mark (%)",
                            showInLegend: true,
                            dataPoints: dataPoints
                        },
                        {
                            type: "bar",
                            name: "Weighted mark after X Courseworks",
                            showInLegend: true,
                            axisYType: "secondary",
                            color: "#C0504E",
                            dataPoints: dataPoints2
                        }
                    ]
                });

            function addData(data) {
                for (var i = (data.length - 1); i >= 0; i--) {
                    dataPoints.push({
                        label: data[i].Label,
                        y: data[i].PredictedModuleMark
                    });

                    dataPoints2.push({
                        label: data[i].Label,
                        y: data[i].MarkAfterXCourseworks
                    });
                }
                chart.render();

            }

            var moduleId = @Model.Module.Id;
            var kValueDistance = $("#kValueDistance").val();

            var url = '@Url.Action("GetKnnResult", "Results")' + '?moduleId=' + moduleId + '&kValue=' + kValueDistance;
            $.getJSON(url, addData);

            $.getJSON(url, function (response) {
                $.each(response,
                    function (index, item) { // item is now an object containing properties ID and Text
                        var classification = "";
                        if (index == 0) {
                            if (item.PredictedModuleMark >= 70) {
                                classification = "First Class";
                            }
                            else if (item.PredictedModuleMark >= 60) {
                                classification = "Second Class Division 1";
                            }
                            else if (item.PredictedModuleMark >= 50) {
                                classification = "Second Class Division 2";
                            }
                            else if (item.PredictedModuleMark >= 40) {
                                classification = "Third Class";
                            }
                            else{
                                classification = "Fail";
                            }

                            var grade = $("#knnPredictedGrade").val(item.PredictedModuleMark);
                            $("#knnPredictedGrade").text("Your predicted grade: " + grade.val() + " - " + classification);
                        }
                    });
            });
        }

        function redrawKnnResultGraphDistance() {
            $("#knnChartContainerDistance").html("");
            drawKnnResultGraphDistance();
        }

    function drawKnnResultGraphBubble() {
            var dataPoints = [];

            var chart = new CanvasJS.Chart("knnChartContainerBubble",
                {
                    animationEnabled: true,
                    theme: "light1",
                    title: {
                        text: "Nearest Neighbours (Distance)"
                    },
                    axisX: {
                        title: "Distance",
                        titleFontSize: 24,
                        minimum: 0,
                    },
                    axisY: {
                        title: "Mark (%)",
                        titleFontSize: 24,
                        maximum: 100,
                        interlacedColor: "#D6DCFC"
                    },

                    toolTip: {
                        shared: true
                    },
                    data: [
                        {
                            type: "bubble",
                            name: "Mark (%)",
                            toolTipContent: "<b>{name}</b><br/>Distance: {x}<br/> Predicted/Attained Mark: {y}</br>",
                            dataPoints: dataPoints
                        },
                    ]
                });

            function addData(data) {
                for (var i = 0; i < data.length; i++) {
                    dataPoints.push({
                        x: data[i].Distance,
                        y: data[i].PredictedModuleMark,
                        z: data[i].PredictedModuleMark,
                        name: data[i].Label
                    });
                }
                chart.render();

            }

            var moduleId = @Model.Module.Id;
            var kValueBubble = $("#kValueBubble").val();

            var url = '@Url.Action("GetKnnResult", "Results")' + '?moduleId=' + moduleId + '&kValue=' + kValueBubble;
            $.getJSON(url, addData);
    }

        function redrawKnnResultGraphBubble() {
            $("#knnChartContainerBubble").html("");
            drawKnnResultGraphBubble();
    }

        function drawProbabilityDensityGraph() {
            var dataPoints = [];

            var chart = new CanvasJS.Chart("probabilityDensityChartContainer",
                {
                    animationEnabled: true,
                    theme: "light1",
                    title: {
                        text: "Distribution of Coursework Marks"
                    },
                    axisX: {
                        title: "Mark",
                        titleFontSize: 24,
                    },
                    axisY: {
                        title: "Percentage Chance",
                        titleFontSize: 24,
                        minimum: 0,
                        interlacedColor: "#D6DCFC"
                    },

                    toolTip: {
                        shared: true
                    },
                    data: [
                        {
                            type: "spline",
                            name: "Mark (%)",
                            toolTipContent: "<b>Percentage Chance:</b> {y} <br/><b>Mark (%):</b> {x}<br/>",
                            dataPoints: dataPoints
                        },
                    ]
                });

            function addData(data) {
                for (var i = 0; i < data.length; i++) {
                    dataPoints.push({
                        x: data[i].XValue,
                        y: data[i].PropabilityDensity,
                    });
                }
                chart.render();

            }

            var moduleId = @Model.Module.Id;
            var url = '@Url.Action("GetProbabilityDensityFunction", "Results")' + '?moduleId=' + moduleId;
            $.getJSON(url, addData);
        }

</script>
