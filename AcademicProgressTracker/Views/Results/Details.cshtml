@model AcademicProgressTracker.ViewModels.ResultsDetailedViewModel
@{
    ViewBag.Title = @Model.Module.Name;
    ViewBag.Message = "Detailed analytics for: " + @Model.Module.Name;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>@ViewBag.Title</h1>
<p>@ViewBag.Message</p>

<div id="gradesChartContainer" style="height: 370px; width: 80%;"></div>
<br /><br /><br />
<div id="gradesOverTimeChartContainer" style="height: 370px; width: 80%;"></div>
<br /><br /><br />
<div id="maximumgradeChartContainer" style="height: 370px; width: 80%;"></div>
<br /><br /><br />
<div id="marksToClassificationChartContainer" style="height: 370px; width: 80%;"></div>
<br /><br /><br />
<h5>How many nearest neightbours do you want to view? (max: 5)</h5>
<input type="text" id="kValueDistance" value ="3"/>
<input type="submit" id="btnSubmit" class="btn btn-info" value="Run" onclick="redrawKnnResultGraphDistance()" /><br/>
<div id="knnChartContainerDistance" style="height: 370px; width: 80%;"></div>
<br /><br /><br />
<h5>How many nearest neightbours do you want to view? (max: 5)</h5>
<input type="text" id="kValueBubble" value="3" />
<input type="submit" id="btnSubmit" class="btn btn-info" value="Run" onclick="redrawKnnResultGraphBubble()" /><br/>
<div id="knnChartContainerBubble" style="height: 370px; width: 80%;"></div>
<br /><br /><br />
<div class="form-group">
    @Html.LabelFor(m => m.KnnPredictionNum)
    @Html.DisplayTextFor(m => m.KnnPredictionNum)<br />
    @Html.LabelFor(m => m.KnnPredictionTxt)
    @Html.DisplayTextFor(m => m.KnnPredictionTxt)
</div>

<script>
        window.onload = function() {
            drawMarksGraph();
            drawGradesOverTimeGraph();
            drawMaximumResultGraph();
            drawMarksToClassificationGraph();
            drawKnnResultGraphDistance();
            drawKnnResultGraphBubble();
        }

        function drawMarksGraph() {
            var dataPoints = [];

            var chart = new CanvasJS.Chart("gradesChartContainer",
                {
                    animationEnabled: true,
                    theme: "light2",
                    title: {
                        text: "Coursework Grades"
                    },
                    axisX: {
                        title: "Coursework Name",
                        titleFontSize: 24,
                    },
                    axisY: {
                        title: "Mark achieved (%)",
                        titleFontSize: 24,
                        maximum: 100,
                        interlacedColor: "#D6DCFC"
                    },

                    toolTip: {
                        shared: true
                    },
                    data: [
                        {
                            type: "column",
                            name: "Current Mark (%)",
                            dataPoints: dataPoints
                        },
                    ]
                });

            function addData(data) {
                for (var i = 0; i < data.length; i++) {
                    dataPoints.push({
                        label: data[i].Name,
                        y: data[i].Mark
                    });
                }
                chart.render();

            }

            var moduleId = @Model.Module.Id;
            var url = '@Url.Action("GetCourseworkGrades", "Results")' + '?moduleId=' + moduleId;
            $.getJSON(url, addData);
    }


        function drawGradesOverTimeGraph() {
            var dataPoints = [];
            var dataPoints2 = [];

            var chart = new CanvasJS.Chart("gradesOverTimeChartContainer",
                {
                    animationEnabled: true,
                    theme: "light2",
                    title: {
                        text: "Coursework Grades Over Time"
                    },
                    axisX: {
                        title: "Date",
                        titleFontSize: 24,
                    },
                    axisY: {
                        title: "Mark achieved (%)",
                        titleFontSize: 24,
                        maximum: 100,
                        interlacedColor: "#D6DCFC"
                    },
                    axisY2: {
                        title: "Cumulative Weighted Mark (%)",
                        titleFontColor: "#C0504E",
                        lineColor: "#C0504E",
                        tickColor: "#C0504E",
                        maximum: 100,
                    },
                    toolTip: {
                        shared: true
                    },
                    legend: {
                        cursor:"pointer",
                        itemclick: toggleDataSeries
                    },
                    data: [
                        {
                            type: "line",
                            xValueType: "dateTime",
                            name: "Coursework Mark (%)",
                            showInLegend: true,
                            dataPoints: dataPoints
                        },
                        {
                            type: "line",
                            xValueType: "dateTime",
                            name: "Cumulative Weighted Mark (%)",
                            showInLegend: true,
                            axisYType: "secondary",
                            color: "#C0504E",
                            lineDashType: "dash",
                            dataPoints: dataPoints2
                        }
                    ]
                });

            function addData(data) {
                for (var i = 0; i < data.length; i++) {
                    dataPoints.push({
                        x: new Date(data[i].AddedDateTime),
                        y: data[i].Mark
                    });
                    dataPoints2.push({
                        x: new Date(data[i].AddedDateTime),
                        y: data[i].WeightedMark
                    });
                }
                chart.render();

            }

            function toggleDataSeries(e) {
                if (typeof(e.dataSeries.visible) === "undefined" || e.dataSeries.visible) {
                    e.dataSeries.visible = false;
                }
                else {
                    e.dataSeries.visible = true;
                }
                chart.render();
            }

            var moduleId = @Model.Module.Id;
            var url = '@Url.Action("GetCourseworkGradesOverTime", "Results")' + '?moduleId=' + moduleId;
            $.getJSON(url, addData);
        }


        function drawMaximumResultGraph() {
            var dataPoints = [];
            var dataPoints2 = [];

            var chart = new CanvasJS.Chart("maximumgradeChartContainer",
                {
                    animationEnabled: true,
                    theme: "light2",
                    title: {
                        text: "Maximum Possible Grade"
                    },
                    axisX: {
                        title: "Module",
                        titleFontSize: 24,
                    },
                    axisY: {
                        title: "Weighted Mark (%)",
                        titleFontColor: "#4F81BC",
                        lineColor: "#4F81BC",
                        labelFontColor: "#4F81BC",
                        tickColor: "#4F81BC",
                        interlacedColor: "#F8F1E4",
                        titleFontSize: 24,
                        maximum: 100
                    },
                    axisY2: {
                        title: "Maximum Possible Mark (%)",
                        titleFontColor: "#C0504E",
                        lineColor: "#C0504E",
                        tickColor: "#C0504E",
                        maximum: 100,
                    },
                    toolTip: {
                        shared: true
                    },
                    legend: {
                        cursor:"pointer",
                        itemclick: toggleDataSeries
                    },
                    data: [
                        {
                            type: "column",
                            name: "Current Weighted Mark (%)",
                            legendText: "Current Weighted Mark (%)",
                            showInLegend: true,
                            dataPoints: dataPoints
                        },
                            {
                                type: "column",
                                name: "Best Possible Weighted Mark (%)",
                                legendText: "Best Possible Weighted Mark (%)",
                                showInLegend: true,
                                axisYType: "secondary",
                                color: "#C0504E",
                                dataPoints: dataPoints2
                            }
                    ]
                });

            function addData(data) {
                for (var i = 0; i < data.length; i++) {
                    dataPoints.push({
                        label: "Grades",
                        y: data[i].CurrentWeightedMark
                    });
                    dataPoints2.push({
                        label: "Grades",
                        y: data[i].MaximumWeightedMark
                    });
                }
                chart.render();

            }

            function toggleDataSeries(e) {
                if (typeof(e.dataSeries.visible) === "undefined" || e.dataSeries.visible) {
                    e.dataSeries.visible = false;
                }
                else {
                    e.dataSeries.visible = true;
                }
                chart.render();
            }

            var moduleId = @Model.Module.Id;
            var url = '@Url.Action("GetMaximumWeightedGrade", "Results")' + '?moduleId=' + moduleId;
            $.getJSON(url, addData);
        }

        function drawMarksToClassificationGraph() {
            var dataPoints = [];

            var chart = new CanvasJS.Chart("marksToClassificationChartContainer",
                {
                    animationEnabled: true,
                    theme: "light2",
                    title: {
                        text: "Average Mark in Remaining Coursework for:"
                    },
                    axisX: {
                        title: "Distance",
                        titleFontSize: 24,
                    },
                    axisY: {
                        title: "Mark (%)",
                        titleFontSize: 24,
                        maximum: 100,
                        interlacedColor: "#D6DCFC"
                    },

                    toolTip: {
                        shared: true
                    },
                    data: [
                        {
                            type: "column",
                            name: "Mark (%)",
                            //toolTipContent: "<b>{name}</b><br/>Distance: {x}<br/> Average Mark: {y}",
                            dataPoints: dataPoints
                        },
                    ]
                });

            function addData(data) {
                for (var i = 0; i < data.length; i++) {
                    dataPoints.push({
                        label: data[i].Label,
                        y: data[i].MarkNeeded,
                    });
                }
                chart.render();

            }

            var moduleId = @Model.Module.Id;
            var url = '@Url.Action("GetMarksToClassification", "Results")' + '?moduleId=' + moduleId;
            $.getJSON(url, addData);
        }

        function drawKnnResultGraphDistance() {
            var dataPoints = [];
            var dataPoints2 = [];

            var chart = new CanvasJS.Chart("knnChartContainerDistance",
                {
                    animationEnabled: true,
                    theme: "light2",
                    title: {
                        text: "Nearest Neighbours (Mark)"
                    },
                    axisX: {
                        title: "Neighbour",
                        titleFontSize: 24,
                    },
                    axisY: {
                        title: "Mark",
                        titleFontSize: 24,
                        maximum: 100,
                        interlacedColor: "#D6DCFC"
                    },
                    axisY2: {
                        title: "Distance",
                        titleFontColor: "#C0504E",
                        lineColor: "#C0504E",
                        tickColor: "#C0504E",
                        maximum: 100,
                    },

                    toolTip: {
                        shared: true
                    },
                    data: [
                        {
                            type: "bar",
                            name: "Mark (%)",
                            showInLegend: true,
                            dataPoints: dataPoints
                        },
                        {
                            type: "bar",
                            name: "Distance ",
                            legendText: "Distance",
                            showInLegend: true,
                            axisYType: "secondary",
                            color: "#C0504E",
                            dataPoints: dataPoints2
                        }
                    ]
                });

            function addData(data) {
                for (var i = 0; i < data.length; i++) {
                    dataPoints.push({
                        label: data[i].Label,
                        y: data[i].AverageModuleMark
                    });

                    dataPoints2.push({
                        label: data[i].Label,
                        y: data[i].Distance
                    });
                }
                chart.render();

            }

            var moduleId = @Model.Module.Id;
            debugger;
            var kValueDistance = $("#kValueDistance").val();

            var url = '@Url.Action("GetKnnResult", "Results")' + '?moduleId=' + moduleId + '&kValue=' + kValueDistance;
            $.getJSON(url, addData);
        }

        function redrawKnnResultGraphDistance() {
            $("#knnChartContainerDistance").html("");
            drawKnnResultGraphDistance();
        }

    function drawKnnResultGraphBubble() {
            var dataPoints = [];

            var chart = new CanvasJS.Chart("knnChartContainerBubble",
                {
                    animationEnabled: true,
                    theme: "light2",
                    title: {
                        text: "Nearest Neighbours (Distance)"
                    },
                    axisX: {
                        title: "Distance",
                        titleFontSize: 24,
                        minimum: 0,
                    },
                    axisY: {
                        title: "Mark (%)",
                        titleFontSize: 24,
                        maximum: 100,
                        interlacedColor: "#D6DCFC"
                    },

                    toolTip: {
                        shared: true
                    },
                    data: [
                        {
                            type: "bubble",
                            name: "Mark (%)",
                            toolTipContent: "<b>{name}</b><br/>Distance: {x}<br/> Average Mark: {y}",
                            dataPoints: dataPoints
                        },
                    ]
                });

            function addData(data) {
                for (var i = 0; i < data.length; i++) {
                    dataPoints.push({
                        x: data[i].Distance,
                        y: data[i].AverageModuleMark,
                        z: data[i].AverageModuleMark,
                        name: data[i].Label
                    });
                }
                chart.render();

            }

            var moduleId = @Model.Module.Id;
            var kValueBubble = $("#kValueBubble").val();

            var url = '@Url.Action("GetKnnResult", "Results")' + '?moduleId=' + moduleId + '&kValue=' + kValueBubble;
            $.getJSON(url, addData);
    }

        function redrawKnnResultGraphBubble() {
            $("#knnChartContainerBubble").html("");
            drawKnnResultGraphBubble();
    }

</script>
